#!/bin/bash
set -e

echo "Preparing environment"
# shellcheck disable=SC1091
. /usr/share/coreos/release
/usr/bin/emerge-gitclone
OVERLAY_VERSION=$(curl -s https://raw.githubusercontent.com/coreos/manifest/v"$COREOS_RELEASE_VERSION"/release.xml | grep coreos-overlay | cut -d\" -f 8)
PORTAGE_VERSION=$(curl -s https://raw.githubusercontent.com/coreos/manifest/v"$COREOS_RELEASE_VERSION"/release.xml | grep portage-stable | cut -d\" -f 8)
git -C /var/lib/portage/coreos-overlay checkout "$OVERLAY_VERSION"
git -C /var/lib/portage/portage-stable checkout "$PORTAGE_VERSION"
# try to use pre-built binaries and fall back to building from source
emerge -gKq --jobs 4 --load-average 4 coreos-sources || emerge -q --jobs 4 --load-average 4 coreos-sources
cp /lib/modules/*-coreos*/build/.config /usr/src/linux/.config
KERNEL_VERSION=$(head -n 3 /usr/src/linux/.config | tail -n 1 | awk '{print $3}')
make -C /usr/src/linux olddefconfig
make -C /usr/src/linux modules_prepare

echo "Compiling NVIDIA modules"
mkdir -p /tmp/nvidia
pushd /tmp/nvidia
curl -Ls "http://us.download.nvidia.com/XFree86/Linux-x86_64/$DRIVER_VERSION/NVIDIA-Linux-x86_64-$DRIVER_VERSION.run" -o nvidia.run
chmod +x nvidia.run
./nvidia.run -x -s
pushd "./NVIDIA-Linux-x86_64-$DRIVER_VERSION"
./nvidia-installer -s -n --kernel-source-path=/usr/src/linux --no-check-for-alternate-installs --no-opengl-files --kernel-install-path="$PWD" --log-file-name="$PWD"/nvidia-installer.log || true
if [ -e kernel/nvidia.ko ] ; then echo "Successfully compiled NVIDIA modules" ; else echo "Failed to compile NVIDIA modules" && cat "$PWD"/nvidia-installer.log && exit 1 ; fi

echo "Archiving assets"
mkdir -p /out/lib/modules/"$KERNEL_VERSION" /out/bin
cp ./*.so* /out/lib
cp kernel/*.ko /out/lib/modules/"$KERNEL_VERSION"
for b in nvidia-debugdump nvidia-cuda-mps-control nvidia-xconfig nvidia-modprobe nvidia-smi nvidia-cuda-mps-server nvidia-persistenced nvidia-settings; do cp "$b" /out/bin/; done
